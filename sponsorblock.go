// Package sponsorblockgo provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package sponsorblockgo

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// Postadduserasvip request
	Postadduserasvip(ctx context.Context, params *PostadduserasvipParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostClearCache request
	PostClearCache(ctx context.Context, params *PostClearCacheParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDaysSavedFormatted request
	GetDaysSavedFormatted(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTimeSavedForUser request
	GetTimeSavedForUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTopUsers request
	GetTopUsers(ctx context.Context, params *GetTopUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTotalStats request
	GetTotalStats(ctx context.Context, params *GetTotalStatsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsername request
	GetUsername(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetViewsForUser request
	GetViewsForUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIsUserVIP request
	GetIsUserVIP(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteLockCategories request
	DeleteLockCategories(ctx context.Context, params *DeleteLockCategoriesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLockCategories request
	GetLockCategories(ctx context.Context, params *GetLockCategoriesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostLockCategories request
	PostLockCategories(ctx context.Context, params *PostLockCategoriesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLockCategoriesByHash request
	GetLockCategoriesByHash(ctx context.Context, sha256HashPrefix Sha256HashPrefix, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLockReason request
	GetLockReason(ctx context.Context, params *GetLockReasonParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPurgeAllSegments request
	PostPurgeAllSegments(ctx context.Context, params *PostPurgeAllSegmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSearchSegments request
	GetSearchSegments(ctx context.Context, params *GetSearchSegmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSegmentInfo request
	GetSegmentInfo(ctx context.Context, params *GetSegmentInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetUsername request
	SetUsername(ctx context.Context, params *SetUsernameParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostShadowBanUser request
	PostShadowBanUser(ctx context.Context, params *PostShadowBanUserParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Getskipsegments request
	Getskipsegments(ctx context.Context, params *GetskipsegmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSkipSegments request with any body
	PostSkipSegmentsWithBody(ctx context.Context, params *PostSkipSegmentsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSkipSegments(ctx context.Context, params *PostSkipSegmentsParams, body PostSkipSegmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSkipSegmentsByHash request
	GetSkipSegmentsByHash(ctx context.Context, sha256HashPrefix Sha256HashPrefix, params *GetSkipSegmentsByHashParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatus request
	GetStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatusParam request
	GetStatusParam(ctx context.Context, value string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserID request
	GetUserID(ctx context.Context, params *GetUserIDParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserInfo request
	GetUserInfo(ctx context.Context, params *GetUserInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserStats request
	GetUserStats(ctx context.Context, params *GetUserStatsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostViewedVideoSponsorTime request
	PostViewedVideoSponsorTime(ctx context.Context, params *PostViewedVideoSponsorTimeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostVoteOnSponsorTime request
	PostVoteOnSponsorTime(ctx context.Context, params *PostVoteOnSponsorTimeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostWarnUser request with any body
	PostWarnUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostWarnUser(ctx context.Context, body PostWarnUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) Postadduserasvip(ctx context.Context, params *PostadduserasvipParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostadduserasvipRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostClearCache(ctx context.Context, params *PostClearCacheParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostClearCacheRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDaysSavedFormatted(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDaysSavedFormattedRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTimeSavedForUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTimeSavedForUserRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTopUsers(ctx context.Context, params *GetTopUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTopUsersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTotalStats(ctx context.Context, params *GetTotalStatsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTotalStatsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsername(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsernameRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetViewsForUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetViewsForUserRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIsUserVIP(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIsUserVIPRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteLockCategories(ctx context.Context, params *DeleteLockCategoriesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteLockCategoriesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLockCategories(ctx context.Context, params *GetLockCategoriesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLockCategoriesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLockCategories(ctx context.Context, params *PostLockCategoriesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLockCategoriesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLockCategoriesByHash(ctx context.Context, sha256HashPrefix Sha256HashPrefix, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLockCategoriesByHashRequest(c.Server, sha256HashPrefix)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLockReason(ctx context.Context, params *GetLockReasonParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLockReasonRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPurgeAllSegments(ctx context.Context, params *PostPurgeAllSegmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPurgeAllSegmentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSearchSegments(ctx context.Context, params *GetSearchSegmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSearchSegmentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSegmentInfo(ctx context.Context, params *GetSegmentInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSegmentInfoRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetUsername(ctx context.Context, params *SetUsernameParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetUsernameRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostShadowBanUser(ctx context.Context, params *PostShadowBanUserParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostShadowBanUserRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Getskipsegments(ctx context.Context, params *GetskipsegmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetskipsegmentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSkipSegmentsWithBody(ctx context.Context, params *PostSkipSegmentsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSkipSegmentsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSkipSegments(ctx context.Context, params *PostSkipSegmentsParams, body PostSkipSegmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSkipSegmentsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSkipSegmentsByHash(ctx context.Context, sha256HashPrefix Sha256HashPrefix, params *GetSkipSegmentsByHashParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSkipSegmentsByHashRequest(c.Server, sha256HashPrefix, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatusRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatusParam(ctx context.Context, value string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatusParamRequest(c.Server, value)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserID(ctx context.Context, params *GetUserIDParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserIDRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserInfo(ctx context.Context, params *GetUserInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserInfoRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserStats(ctx context.Context, params *GetUserStatsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserStatsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostViewedVideoSponsorTime(ctx context.Context, params *PostViewedVideoSponsorTimeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostViewedVideoSponsorTimeRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVoteOnSponsorTime(ctx context.Context, params *PostVoteOnSponsorTimeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVoteOnSponsorTimeRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostWarnUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostWarnUserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostWarnUser(ctx context.Context, body PostWarnUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostWarnUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostadduserasvipRequest generates requests for Postadduserasvip
func NewPostadduserasvipRequest(server string, params *PostadduserasvipParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/addUserAsVIP")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userID", runtime.ParamLocationQuery, params.UserID); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Enabled != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "enabled", runtime.ParamLocationQuery, *params.Enabled); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostClearCacheRequest generates requests for PostClearCache
func NewPostClearCacheRequest(server string, params *PostClearCacheParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/clearCache")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "videoID", runtime.ParamLocationQuery, params.VideoID); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "service", runtime.ParamLocationQuery, params.Service); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDaysSavedFormattedRequest generates requests for GetDaysSavedFormatted
func NewGetDaysSavedFormattedRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/getDaysSavedFormatted")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTimeSavedForUserRequest generates requests for GetTimeSavedForUser
func NewGetTimeSavedForUserRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/getTimeSavedForUser")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTopUsersRequest generates requests for GetTopUsers
func NewGetTopUsersRequest(server string, params *GetTopUsersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/getTopUsers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortType", runtime.ParamLocationQuery, params.SortType); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTotalStatsRequest generates requests for GetTotalStats
func NewGetTotalStatsRequest(server string, params *GetTotalStatsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/getTotalStats")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.CountContributingUsers != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countContributingUsers", runtime.ParamLocationQuery, *params.CountContributingUsers); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUsernameRequest generates requests for GetUsername
func NewGetUsernameRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/getUsername")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetViewsForUserRequest generates requests for GetViewsForUser
func NewGetViewsForUserRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/getViewsForUser")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIsUserVIPRequest generates requests for GetIsUserVIP
func NewGetIsUserVIPRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/isUserVIP")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteLockCategoriesRequest generates requests for DeleteLockCategories
func NewDeleteLockCategoriesRequest(server string, params *DeleteLockCategoriesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/lockCategories")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "videoID", runtime.ParamLocationQuery, params.VideoID); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "category", runtime.ParamLocationQuery, params.Category); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLockCategoriesRequest generates requests for GetLockCategories
func NewGetLockCategoriesRequest(server string, params *GetLockCategoriesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/lockCategories")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "videoID", runtime.ParamLocationQuery, params.VideoID); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostLockCategoriesRequest generates requests for PostLockCategories
func NewPostLockCategoriesRequest(server string, params *PostLockCategoriesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/lockCategories")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "videoID", runtime.ParamLocationQuery, params.VideoID); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "category", runtime.ParamLocationQuery, params.Category); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Reason != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reason", runtime.ParamLocationQuery, *params.Reason); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLockCategoriesByHashRequest generates requests for GetLockCategoriesByHash
func NewGetLockCategoriesByHashRequest(server string, sha256HashPrefix Sha256HashPrefix) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "sha256HashPrefix", runtime.ParamLocationPath, sha256HashPrefix)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/lockCategories/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLockReasonRequest generates requests for GetLockReason
func NewGetLockReasonRequest(server string, params *GetLockReasonParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/lockReason")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "videoID", runtime.ParamLocationQuery, params.VideoID); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Category != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "category", runtime.ParamLocationQuery, *params.Category); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPurgeAllSegmentsRequest generates requests for PostPurgeAllSegments
func NewPostPurgeAllSegmentsRequest(server string, params *PostPurgeAllSegmentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/purgeAllSegments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "videoID", runtime.ParamLocationQuery, params.VideoID); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "service", runtime.ParamLocationQuery, params.Service); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSearchSegmentsRequest generates requests for GetSearchSegments
func NewGetSearchSegmentsRequest(server string, params *GetSearchSegmentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/searchSegments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "videoID", runtime.ParamLocationQuery, params.VideoID); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "category", runtime.ParamLocationQuery, params.Category); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "actionType", runtime.ParamLocationQuery, params.ActionType); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "service", runtime.ParamLocationQuery, params.Service); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.MinVotes != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "minVotes", runtime.ParamLocationQuery, *params.MinVotes); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.MaxVotes != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "maxVotes", runtime.ParamLocationQuery, *params.MaxVotes); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.MinViews != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "minViews", runtime.ParamLocationQuery, *params.MinViews); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.MaxViews != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "maxViews", runtime.ParamLocationQuery, *params.MaxViews); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Locked != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "locked", runtime.ParamLocationQuery, *params.Locked); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Hidden != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hidden", runtime.ParamLocationQuery, *params.Hidden); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Ignored != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ignored", runtime.ParamLocationQuery, *params.Ignored); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSegmentInfoRequest generates requests for GetSegmentInfo
func NewGetSegmentInfoRequest(server string, params *GetSegmentInfoParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/segmentInfo")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.UUID != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "UUID", runtime.ParamLocationQuery, *params.UUID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.UUIDs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "UUIDs", runtime.ParamLocationQuery, *params.UUIDs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSetUsernameRequest generates requests for SetUsername
func NewSetUsernameRequest(server string, params *SetUsernameParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/setUsername")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "username", runtime.ParamLocationQuery, params.Username); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostShadowBanUserRequest generates requests for PostShadowBanUser
func NewPostShadowBanUserRequest(server string, params *PostShadowBanUserParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shadowBanUser")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userID", runtime.ParamLocationQuery, params.UserID); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Enabled != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "enabled", runtime.ParamLocationQuery, *params.Enabled); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.UnHideOldSubmittions != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "unHideOldSubmittions", runtime.ParamLocationQuery, *params.UnHideOldSubmittions); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetskipsegmentsRequest generates requests for Getskipsegments
func NewGetskipsegmentsRequest(server string, params *GetskipsegmentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/skipSegments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "videoID", runtime.ParamLocationQuery, params.VideoID); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "category", runtime.ParamLocationQuery, params.Category); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "actionType", runtime.ParamLocationQuery, params.ActionType); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.RequiredSegment != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "requiredSegment", runtime.ParamLocationQuery, *params.RequiredSegment); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "service", runtime.ParamLocationQuery, params.Service); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSkipSegmentsRequest calls the generic PostSkipSegments builder with application/json body
func NewPostSkipSegmentsRequest(server string, params *PostSkipSegmentsParams, body PostSkipSegmentsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSkipSegmentsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostSkipSegmentsRequestWithBody generates requests for PostSkipSegments with any type of body
func NewPostSkipSegmentsRequestWithBody(server string, params *PostSkipSegmentsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/skipSegments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "videoID", runtime.ParamLocationQuery, params.VideoID); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userAgent", runtime.ParamLocationQuery, params.UserAgent); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "service", runtime.ParamLocationQuery, params.Service); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.VideoDuration != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "videoDuration", runtime.ParamLocationQuery, *params.VideoDuration); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "actionType", runtime.ParamLocationQuery, params.ActionType); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "category", runtime.ParamLocationQuery, params.Category); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startTime", runtime.ParamLocationQuery, params.StartTime); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endTime", runtime.ParamLocationQuery, params.EndTime); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSkipSegmentsByHashRequest generates requests for GetSkipSegmentsByHash
func NewGetSkipSegmentsByHashRequest(server string, sha256HashPrefix Sha256HashPrefix, params *GetSkipSegmentsByHashParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "sha256HashPrefix", runtime.ParamLocationPath, sha256HashPrefix)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/skipSegments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "category", runtime.ParamLocationQuery, params.Category); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.RequiredSegment != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "requiredSegment", runtime.ParamLocationQuery, *params.RequiredSegment); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "actionType", runtime.ParamLocationQuery, params.ActionType); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "service", runtime.ParamLocationQuery, params.Service); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStatusRequest generates requests for GetStatus
func NewGetStatusRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStatusParamRequest generates requests for GetStatusParam
func NewGetStatusParamRequest(server string, value string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "value", runtime.ParamLocationPath, value)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/status/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserIDRequest generates requests for GetUserID
func NewGetUserIDRequest(server string, params *GetUserIDParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/userID")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "username", runtime.ParamLocationQuery, params.Username); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Exact != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exact", runtime.ParamLocationQuery, *params.Exact); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserInfoRequest generates requests for GetUserInfo
func NewGetUserInfoRequest(server string, params *GetUserInfoParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/userInfo")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.PublicUserID != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "publicUserID", runtime.ParamLocationQuery, *params.PublicUserID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.UserID != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userID", runtime.ParamLocationQuery, *params.UserID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Value != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("spaceDelimited", true, "value", runtime.ParamLocationQuery, *params.Value); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserStatsRequest generates requests for GetUserStats
func NewGetUserStatsRequest(server string, params *GetUserStatsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/userStats")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userID", runtime.ParamLocationQuery, params.UserID); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.FetchCategoryStats != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fetchCategoryStats", runtime.ParamLocationQuery, *params.FetchCategoryStats); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FetchActionTypeStats != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fetchActionTypeStats", runtime.ParamLocationQuery, *params.FetchActionTypeStats); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostViewedVideoSponsorTimeRequest generates requests for PostViewedVideoSponsorTime
func NewPostViewedVideoSponsorTimeRequest(server string, params *PostViewedVideoSponsorTimeParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/viewedVideoSponsorTime")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "UUID", runtime.ParamLocationQuery, params.UUID); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostVoteOnSponsorTimeRequest generates requests for PostVoteOnSponsorTime
func NewPostVoteOnSponsorTimeRequest(server string, params *PostVoteOnSponsorTimeParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/voteOnSponsorTime")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "UUID", runtime.ParamLocationQuery, params.UUID); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Type != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "category", runtime.ParamLocationQuery, params.Category); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostWarnUserRequest calls the generic PostWarnUser builder with application/json body
func NewPostWarnUserRequest(server string, body PostWarnUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostWarnUserRequestWithBody(server, "application/json", bodyReader)
}

// NewPostWarnUserRequestWithBody generates requests for PostWarnUser with any type of body
func NewPostWarnUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/warnUser")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// Postadduserasvip request
	PostadduserasvipWithResponse(ctx context.Context, params *PostadduserasvipParams, reqEditors ...RequestEditorFn) (*PostadduserasvipResponse, error)

	// PostClearCache request
	PostClearCacheWithResponse(ctx context.Context, params *PostClearCacheParams, reqEditors ...RequestEditorFn) (*PostClearCacheResponse, error)

	// GetDaysSavedFormatted request
	GetDaysSavedFormattedWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDaysSavedFormattedResponse, error)

	// GetTimeSavedForUser request
	GetTimeSavedForUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTimeSavedForUserResponse, error)

	// GetTopUsers request
	GetTopUsersWithResponse(ctx context.Context, params *GetTopUsersParams, reqEditors ...RequestEditorFn) (*GetTopUsersResponse, error)

	// GetTotalStats request
	GetTotalStatsWithResponse(ctx context.Context, params *GetTotalStatsParams, reqEditors ...RequestEditorFn) (*GetTotalStatsResponse, error)

	// GetUsername request
	GetUsernameWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUsernameResponse, error)

	// GetViewsForUser request
	GetViewsForUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetViewsForUserResponse, error)

	// GetIsUserVIP request
	GetIsUserVIPWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetIsUserVIPResponse, error)

	// DeleteLockCategories request
	DeleteLockCategoriesWithResponse(ctx context.Context, params *DeleteLockCategoriesParams, reqEditors ...RequestEditorFn) (*DeleteLockCategoriesResponse, error)

	// GetLockCategories request
	GetLockCategoriesWithResponse(ctx context.Context, params *GetLockCategoriesParams, reqEditors ...RequestEditorFn) (*GetLockCategoriesResponse, error)

	// PostLockCategories request
	PostLockCategoriesWithResponse(ctx context.Context, params *PostLockCategoriesParams, reqEditors ...RequestEditorFn) (*PostLockCategoriesResponse, error)

	// GetLockCategoriesByHash request
	GetLockCategoriesByHashWithResponse(ctx context.Context, sha256HashPrefix Sha256HashPrefix, reqEditors ...RequestEditorFn) (*GetLockCategoriesByHashResponse, error)

	// GetLockReason request
	GetLockReasonWithResponse(ctx context.Context, params *GetLockReasonParams, reqEditors ...RequestEditorFn) (*GetLockReasonResponse, error)

	// PostPurgeAllSegments request
	PostPurgeAllSegmentsWithResponse(ctx context.Context, params *PostPurgeAllSegmentsParams, reqEditors ...RequestEditorFn) (*PostPurgeAllSegmentsResponse, error)

	// GetSearchSegments request
	GetSearchSegmentsWithResponse(ctx context.Context, params *GetSearchSegmentsParams, reqEditors ...RequestEditorFn) (*GetSearchSegmentsResponse, error)

	// GetSegmentInfo request
	GetSegmentInfoWithResponse(ctx context.Context, params *GetSegmentInfoParams, reqEditors ...RequestEditorFn) (*GetSegmentInfoResponse, error)

	// SetUsername request
	SetUsernameWithResponse(ctx context.Context, params *SetUsernameParams, reqEditors ...RequestEditorFn) (*SetUsernameResponse, error)

	// PostShadowBanUser request
	PostShadowBanUserWithResponse(ctx context.Context, params *PostShadowBanUserParams, reqEditors ...RequestEditorFn) (*PostShadowBanUserResponse, error)

	// Getskipsegments request
	GetskipsegmentsWithResponse(ctx context.Context, params *GetskipsegmentsParams, reqEditors ...RequestEditorFn) (*GetskipsegmentsResponse, error)

	// PostSkipSegments request with any body
	PostSkipSegmentsWithBodyWithResponse(ctx context.Context, params *PostSkipSegmentsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSkipSegmentsResponse, error)

	PostSkipSegmentsWithResponse(ctx context.Context, params *PostSkipSegmentsParams, body PostSkipSegmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSkipSegmentsResponse, error)

	// GetSkipSegmentsByHash request
	GetSkipSegmentsByHashWithResponse(ctx context.Context, sha256HashPrefix Sha256HashPrefix, params *GetSkipSegmentsByHashParams, reqEditors ...RequestEditorFn) (*GetSkipSegmentsByHashResponse, error)

	// GetStatus request
	GetStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatusResponse, error)

	// GetStatusParam request
	GetStatusParamWithResponse(ctx context.Context, value string, reqEditors ...RequestEditorFn) (*GetStatusParamResponse, error)

	// GetUserID request
	GetUserIDWithResponse(ctx context.Context, params *GetUserIDParams, reqEditors ...RequestEditorFn) (*GetUserIDResponse, error)

	// GetUserInfo request
	GetUserInfoWithResponse(ctx context.Context, params *GetUserInfoParams, reqEditors ...RequestEditorFn) (*GetUserInfoResponse, error)

	// GetUserStats request
	GetUserStatsWithResponse(ctx context.Context, params *GetUserStatsParams, reqEditors ...RequestEditorFn) (*GetUserStatsResponse, error)

	// PostViewedVideoSponsorTime request
	PostViewedVideoSponsorTimeWithResponse(ctx context.Context, params *PostViewedVideoSponsorTimeParams, reqEditors ...RequestEditorFn) (*PostViewedVideoSponsorTimeResponse, error)

	// PostVoteOnSponsorTime request
	PostVoteOnSponsorTimeWithResponse(ctx context.Context, params *PostVoteOnSponsorTimeParams, reqEditors ...RequestEditorFn) (*PostVoteOnSponsorTimeResponse, error)

	// PostWarnUser request with any body
	PostWarnUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostWarnUserResponse, error)

	PostWarnUserWithResponse(ctx context.Context, body PostWarnUserJSONRequestBody, reqEditors ...RequestEditorFn) (*PostWarnUserResponse, error)
}

type PostadduserasvipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostadduserasvipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostadduserasvipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostClearCacheResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *InvalidParameter
	JSON403      *N403VIP
}

// Status returns HTTPResponse.Status
func (r PostClearCacheResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostClearCacheResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDaysSavedFormattedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Days saved (2 decimal places)
		DaysSaved *float32 `json:"daysSaved,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetDaysSavedFormattedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDaysSavedFormattedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTimeSavedForUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// time saved in minutes
		TimeSaved *float32 `json:"timeSaved,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetTimeSavedForUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTimeSavedForUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTopUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		MinutesSaved     *[]float32 `json:"minutesSaved,omitempty"`
		TotalSubmissions *[]int     `json:"totalSubmissions,omitempty"`
		UserNames        *[]string  `json:"userNames,omitempty"`
		ViewCounts       *[]int     `json:"viewCounts,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetTopUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTopUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTotalStatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Sum of public install stats
		ActiveUsers *int `json:"activeUsers,omitempty"`

		// 48-hour active API users https://github.com/ajayyy/PrivacyUserCount
		ApiUsers *int `json:"apiUsers,omitempty"`

		// Total number of minutes saved
		MinutesSaved *float32 `json:"minutesSaved,omitempty"`

		// Number of total submissions
		TotalSubmissions *int         `json:"totalSubmissions,omitempty"`
		UserCount        *interface{} `json:"userCount,omitempty"`

		// Total reported segment views
		ViewCount *int `json:"viewCount,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetTotalStatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTotalStatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsernameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// public userID if not username set
		UserName *interface{} `json:"userName,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetUsernameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsernameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetViewsForUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		ViewCount *int `json:"viewCount,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetViewsForUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetViewsForUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIsUserVIPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Public userID (private userID hashed 5000 times)
		HashedUserID *PublicUserID `json:"hashedUserID,omitempty"`

		// if user is VIP
		Vip *bool `json:"vip,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetIsUserVIPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIsUserVIPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteLockCategoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON403 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteLockCategoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteLockCategoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLockCategoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VideoLock
}

// Status returns HTTPResponse.Status
func (r GetLockCategoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLockCategoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostLockCategoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *InvalidParameter
	JSON403      *N403VIP
}

// Status returns HTTPResponse.Status
func (r PostLockCategoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostLockCategoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLockCategoriesByHashResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Categories []Category `json:"categories"`

		// Full hash of videoID
		Hash VideoIDHash `json:"hash"`

		// VIP specified lock reason
		Reason LockReason `json:"reason"`

		// ID of video
		VideoID VideoID `json:"videoID"`
	}
	JSON400 *InvalidParameter
}

// Status returns HTTPResponse.Status
func (r GetLockCategoriesByHashResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLockCategoriesByHashResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLockReasonResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]LockReason
}

// Status returns HTTPResponse.Status
func (r GetLockReasonResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLockReasonResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPurgeAllSegmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *InvalidParameter
	JSON403      *N403VIP
}

// Status returns HTTPResponse.Status
func (r PostPurgeAllSegmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPurgeAllSegmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSearchSegmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Page Number
		Page *int `json:"page,omitempty"`

		// Total segments matching query
		SegmentCount *int             `json:"segmentCount,omitempty"`
		Segments     *[]SearchSegment `json:"segments,omitempty"`
	}
	JSON400 *struct {
		// Parameter does not match format requirements (Bad JSON or not an arrya)
		Reason *InvalidParameter `json:"reason,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetSearchSegmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSearchSegmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSegmentInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]DbSegment
	JSON400      *struct {
		// reason for failiure
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetSegmentInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSegmentInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetUsernameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r SetUsernameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetUsernameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostShadowBanUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostShadowBanUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostShadowBanUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetskipsegmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]SkipSegment
	JSON400      *struct {
		// Parameter does not match format requirements (Bad JSON or not an arrya)
		Message *InvalidParameter `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetskipsegmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetskipsegmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSkipSegmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		UUID *SegmentUUID `json:"UUID,omitempty"`

		// Segment Category
		Category *Category `json:"category,omitempty"`

		// Start and end time in seconds
		Segment *[]int `json:"segment,omitempty"`
	}
	JSON400 *struct {
		ErrorMessage *interface{} `json:"errorMessage,omitempty"`
	}
	JSON409 *struct {
		// Segment already submitted before
		ErrorMessage *string `json:"errorMessage,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostSkipSegmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSkipSegmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSkipSegmentsByHashResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]HashSkipSegment
	JSON400      *InvalidParameter
}

// Status returns HTTPResponse.Status
func (r GetSkipSegmentsByHashResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSkipSegmentsByHashResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StatusResponse
}

// Status returns HTTPResponse.Status
func (r GetStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatusParamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StatusResponse
}

// Status returns HTTPResponse.Status
func (r GetStatusParamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatusParamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		// Public userID (private userID hashed 5000 times)
		UserID   *PublicUserID `json:"userID,omitempty"`
		UserName *string       `json:"userName,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetUserIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Total number of ignored/ hidden segments
		IgnoredSegmentCount *int `json:"ignoredSegmentCount,omitempty"`

		// Total number of views on ignored/ hidden segments
		IgnoredViewCount *int         `json:"ignoredViewCount,omitempty"`
		LastSegmentID    *SegmentUUID `json:"lastSegmentID,omitempty"`

		// minutes saved
		MinutesSaved *float32 `json:"minutesSaved,omitempty"`

		// Reputation value
		Reputation *float32 `json:"reputation,omitempty"`

		// Total number of segments excluding ignored/ hidden segments
		SegmentCount *int `json:"segmentCount,omitempty"`

		// Public userID (private userID hashed 5000 times)
		UserID *PublicUserID `json:"userID,omitempty"`

		// public userID if not set
		UserName *interface{} `json:"userName,omitempty"`

		// Total number of views ecluding views on ignored/ hidden segments
		ViewCount *int `json:"viewCount,omitempty"`

		// VIP status
		Vip *bool `json:"vip,omitempty"`

		// currently enabled warnings
		Warnings *int `json:"warnings,omitempty"`
	}
	JSON400 *InvalidParameter
}

// Status returns HTTPResponse.Status
func (r GetUserInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserStatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserStats
}

// Status returns HTTPResponse.Status
func (r GetUserStatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserStatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostViewedVideoSponsorTimeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON403 *struct {
		Message *interface{} `json:"message,omitempty"`
	}
	JSON500 *struct {
		Error *string `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostViewedVideoSponsorTimeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostViewedVideoSponsorTimeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostVoteOnSponsorTimeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostVoteOnSponsorTimeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostVoteOnSponsorTimeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostWarnUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON400 *InvalidParameter
	JSON403 *N403VIP
}

// Status returns HTTPResponse.Status
func (r PostWarnUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostWarnUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostadduserasvipWithResponse request returning *PostadduserasvipResponse
func (c *ClientWithResponses) PostadduserasvipWithResponse(ctx context.Context, params *PostadduserasvipParams, reqEditors ...RequestEditorFn) (*PostadduserasvipResponse, error) {
	rsp, err := c.Postadduserasvip(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostadduserasvipResponse(rsp)
}

// PostClearCacheWithResponse request returning *PostClearCacheResponse
func (c *ClientWithResponses) PostClearCacheWithResponse(ctx context.Context, params *PostClearCacheParams, reqEditors ...RequestEditorFn) (*PostClearCacheResponse, error) {
	rsp, err := c.PostClearCache(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostClearCacheResponse(rsp)
}

// GetDaysSavedFormattedWithResponse request returning *GetDaysSavedFormattedResponse
func (c *ClientWithResponses) GetDaysSavedFormattedWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDaysSavedFormattedResponse, error) {
	rsp, err := c.GetDaysSavedFormatted(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDaysSavedFormattedResponse(rsp)
}

// GetTimeSavedForUserWithResponse request returning *GetTimeSavedForUserResponse
func (c *ClientWithResponses) GetTimeSavedForUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTimeSavedForUserResponse, error) {
	rsp, err := c.GetTimeSavedForUser(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTimeSavedForUserResponse(rsp)
}

// GetTopUsersWithResponse request returning *GetTopUsersResponse
func (c *ClientWithResponses) GetTopUsersWithResponse(ctx context.Context, params *GetTopUsersParams, reqEditors ...RequestEditorFn) (*GetTopUsersResponse, error) {
	rsp, err := c.GetTopUsers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTopUsersResponse(rsp)
}

// GetTotalStatsWithResponse request returning *GetTotalStatsResponse
func (c *ClientWithResponses) GetTotalStatsWithResponse(ctx context.Context, params *GetTotalStatsParams, reqEditors ...RequestEditorFn) (*GetTotalStatsResponse, error) {
	rsp, err := c.GetTotalStats(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTotalStatsResponse(rsp)
}

// GetUsernameWithResponse request returning *GetUsernameResponse
func (c *ClientWithResponses) GetUsernameWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUsernameResponse, error) {
	rsp, err := c.GetUsername(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsernameResponse(rsp)
}

// GetViewsForUserWithResponse request returning *GetViewsForUserResponse
func (c *ClientWithResponses) GetViewsForUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetViewsForUserResponse, error) {
	rsp, err := c.GetViewsForUser(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetViewsForUserResponse(rsp)
}

// GetIsUserVIPWithResponse request returning *GetIsUserVIPResponse
func (c *ClientWithResponses) GetIsUserVIPWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetIsUserVIPResponse, error) {
	rsp, err := c.GetIsUserVIP(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIsUserVIPResponse(rsp)
}

// DeleteLockCategoriesWithResponse request returning *DeleteLockCategoriesResponse
func (c *ClientWithResponses) DeleteLockCategoriesWithResponse(ctx context.Context, params *DeleteLockCategoriesParams, reqEditors ...RequestEditorFn) (*DeleteLockCategoriesResponse, error) {
	rsp, err := c.DeleteLockCategories(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteLockCategoriesResponse(rsp)
}

// GetLockCategoriesWithResponse request returning *GetLockCategoriesResponse
func (c *ClientWithResponses) GetLockCategoriesWithResponse(ctx context.Context, params *GetLockCategoriesParams, reqEditors ...RequestEditorFn) (*GetLockCategoriesResponse, error) {
	rsp, err := c.GetLockCategories(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLockCategoriesResponse(rsp)
}

// PostLockCategoriesWithResponse request returning *PostLockCategoriesResponse
func (c *ClientWithResponses) PostLockCategoriesWithResponse(ctx context.Context, params *PostLockCategoriesParams, reqEditors ...RequestEditorFn) (*PostLockCategoriesResponse, error) {
	rsp, err := c.PostLockCategories(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLockCategoriesResponse(rsp)
}

// GetLockCategoriesByHashWithResponse request returning *GetLockCategoriesByHashResponse
func (c *ClientWithResponses) GetLockCategoriesByHashWithResponse(ctx context.Context, sha256HashPrefix Sha256HashPrefix, reqEditors ...RequestEditorFn) (*GetLockCategoriesByHashResponse, error) {
	rsp, err := c.GetLockCategoriesByHash(ctx, sha256HashPrefix, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLockCategoriesByHashResponse(rsp)
}

// GetLockReasonWithResponse request returning *GetLockReasonResponse
func (c *ClientWithResponses) GetLockReasonWithResponse(ctx context.Context, params *GetLockReasonParams, reqEditors ...RequestEditorFn) (*GetLockReasonResponse, error) {
	rsp, err := c.GetLockReason(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLockReasonResponse(rsp)
}

// PostPurgeAllSegmentsWithResponse request returning *PostPurgeAllSegmentsResponse
func (c *ClientWithResponses) PostPurgeAllSegmentsWithResponse(ctx context.Context, params *PostPurgeAllSegmentsParams, reqEditors ...RequestEditorFn) (*PostPurgeAllSegmentsResponse, error) {
	rsp, err := c.PostPurgeAllSegments(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPurgeAllSegmentsResponse(rsp)
}

// GetSearchSegmentsWithResponse request returning *GetSearchSegmentsResponse
func (c *ClientWithResponses) GetSearchSegmentsWithResponse(ctx context.Context, params *GetSearchSegmentsParams, reqEditors ...RequestEditorFn) (*GetSearchSegmentsResponse, error) {
	rsp, err := c.GetSearchSegments(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSearchSegmentsResponse(rsp)
}

// GetSegmentInfoWithResponse request returning *GetSegmentInfoResponse
func (c *ClientWithResponses) GetSegmentInfoWithResponse(ctx context.Context, params *GetSegmentInfoParams, reqEditors ...RequestEditorFn) (*GetSegmentInfoResponse, error) {
	rsp, err := c.GetSegmentInfo(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSegmentInfoResponse(rsp)
}

// SetUsernameWithResponse request returning *SetUsernameResponse
func (c *ClientWithResponses) SetUsernameWithResponse(ctx context.Context, params *SetUsernameParams, reqEditors ...RequestEditorFn) (*SetUsernameResponse, error) {
	rsp, err := c.SetUsername(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetUsernameResponse(rsp)
}

// PostShadowBanUserWithResponse request returning *PostShadowBanUserResponse
func (c *ClientWithResponses) PostShadowBanUserWithResponse(ctx context.Context, params *PostShadowBanUserParams, reqEditors ...RequestEditorFn) (*PostShadowBanUserResponse, error) {
	rsp, err := c.PostShadowBanUser(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostShadowBanUserResponse(rsp)
}

// GetskipsegmentsWithResponse request returning *GetskipsegmentsResponse
func (c *ClientWithResponses) GetskipsegmentsWithResponse(ctx context.Context, params *GetskipsegmentsParams, reqEditors ...RequestEditorFn) (*GetskipsegmentsResponse, error) {
	rsp, err := c.Getskipsegments(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetskipsegmentsResponse(rsp)
}

// PostSkipSegmentsWithBodyWithResponse request with arbitrary body returning *PostSkipSegmentsResponse
func (c *ClientWithResponses) PostSkipSegmentsWithBodyWithResponse(ctx context.Context, params *PostSkipSegmentsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSkipSegmentsResponse, error) {
	rsp, err := c.PostSkipSegmentsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSkipSegmentsResponse(rsp)
}

func (c *ClientWithResponses) PostSkipSegmentsWithResponse(ctx context.Context, params *PostSkipSegmentsParams, body PostSkipSegmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSkipSegmentsResponse, error) {
	rsp, err := c.PostSkipSegments(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSkipSegmentsResponse(rsp)
}

// GetSkipSegmentsByHashWithResponse request returning *GetSkipSegmentsByHashResponse
func (c *ClientWithResponses) GetSkipSegmentsByHashWithResponse(ctx context.Context, sha256HashPrefix Sha256HashPrefix, params *GetSkipSegmentsByHashParams, reqEditors ...RequestEditorFn) (*GetSkipSegmentsByHashResponse, error) {
	rsp, err := c.GetSkipSegmentsByHash(ctx, sha256HashPrefix, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSkipSegmentsByHashResponse(rsp)
}

// GetStatusWithResponse request returning *GetStatusResponse
func (c *ClientWithResponses) GetStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatusResponse, error) {
	rsp, err := c.GetStatus(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatusResponse(rsp)
}

// GetStatusParamWithResponse request returning *GetStatusParamResponse
func (c *ClientWithResponses) GetStatusParamWithResponse(ctx context.Context, value string, reqEditors ...RequestEditorFn) (*GetStatusParamResponse, error) {
	rsp, err := c.GetStatusParam(ctx, value, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatusParamResponse(rsp)
}

// GetUserIDWithResponse request returning *GetUserIDResponse
func (c *ClientWithResponses) GetUserIDWithResponse(ctx context.Context, params *GetUserIDParams, reqEditors ...RequestEditorFn) (*GetUserIDResponse, error) {
	rsp, err := c.GetUserID(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserIDResponse(rsp)
}

// GetUserInfoWithResponse request returning *GetUserInfoResponse
func (c *ClientWithResponses) GetUserInfoWithResponse(ctx context.Context, params *GetUserInfoParams, reqEditors ...RequestEditorFn) (*GetUserInfoResponse, error) {
	rsp, err := c.GetUserInfo(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserInfoResponse(rsp)
}

// GetUserStatsWithResponse request returning *GetUserStatsResponse
func (c *ClientWithResponses) GetUserStatsWithResponse(ctx context.Context, params *GetUserStatsParams, reqEditors ...RequestEditorFn) (*GetUserStatsResponse, error) {
	rsp, err := c.GetUserStats(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserStatsResponse(rsp)
}

// PostViewedVideoSponsorTimeWithResponse request returning *PostViewedVideoSponsorTimeResponse
func (c *ClientWithResponses) PostViewedVideoSponsorTimeWithResponse(ctx context.Context, params *PostViewedVideoSponsorTimeParams, reqEditors ...RequestEditorFn) (*PostViewedVideoSponsorTimeResponse, error) {
	rsp, err := c.PostViewedVideoSponsorTime(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostViewedVideoSponsorTimeResponse(rsp)
}

// PostVoteOnSponsorTimeWithResponse request returning *PostVoteOnSponsorTimeResponse
func (c *ClientWithResponses) PostVoteOnSponsorTimeWithResponse(ctx context.Context, params *PostVoteOnSponsorTimeParams, reqEditors ...RequestEditorFn) (*PostVoteOnSponsorTimeResponse, error) {
	rsp, err := c.PostVoteOnSponsorTime(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostVoteOnSponsorTimeResponse(rsp)
}

// PostWarnUserWithBodyWithResponse request with arbitrary body returning *PostWarnUserResponse
func (c *ClientWithResponses) PostWarnUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostWarnUserResponse, error) {
	rsp, err := c.PostWarnUserWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostWarnUserResponse(rsp)
}

func (c *ClientWithResponses) PostWarnUserWithResponse(ctx context.Context, body PostWarnUserJSONRequestBody, reqEditors ...RequestEditorFn) (*PostWarnUserResponse, error) {
	rsp, err := c.PostWarnUser(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostWarnUserResponse(rsp)
}

// ParsePostadduserasvipResponse parses an HTTP response from a PostadduserasvipWithResponse call
func ParsePostadduserasvipResponse(rsp *http.Response) (*PostadduserasvipResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostadduserasvipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostClearCacheResponse parses an HTTP response from a PostClearCacheWithResponse call
func ParsePostClearCacheResponse(rsp *http.Response) (*PostClearCacheResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostClearCacheResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidParameter
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403VIP
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetDaysSavedFormattedResponse parses an HTTP response from a GetDaysSavedFormattedWithResponse call
func ParseGetDaysSavedFormattedResponse(rsp *http.Response) (*GetDaysSavedFormattedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDaysSavedFormattedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Days saved (2 decimal places)
			DaysSaved *float32 `json:"daysSaved,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTimeSavedForUserResponse parses an HTTP response from a GetTimeSavedForUserWithResponse call
func ParseGetTimeSavedForUserResponse(rsp *http.Response) (*GetTimeSavedForUserResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTimeSavedForUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// time saved in minutes
			TimeSaved *float32 `json:"timeSaved,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTopUsersResponse parses an HTTP response from a GetTopUsersWithResponse call
func ParseGetTopUsersResponse(rsp *http.Response) (*GetTopUsersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTopUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			MinutesSaved     *[]float32 `json:"minutesSaved,omitempty"`
			TotalSubmissions *[]int     `json:"totalSubmissions,omitempty"`
			UserNames        *[]string  `json:"userNames,omitempty"`
			ViewCounts       *[]int     `json:"viewCounts,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTotalStatsResponse parses an HTTP response from a GetTotalStatsWithResponse call
func ParseGetTotalStatsResponse(rsp *http.Response) (*GetTotalStatsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTotalStatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Sum of public install stats
			ActiveUsers *int `json:"activeUsers,omitempty"`

			// 48-hour active API users https://github.com/ajayyy/PrivacyUserCount
			ApiUsers *int `json:"apiUsers,omitempty"`

			// Total number of minutes saved
			MinutesSaved *float32 `json:"minutesSaved,omitempty"`

			// Number of total submissions
			TotalSubmissions *int         `json:"totalSubmissions,omitempty"`
			UserCount        *interface{} `json:"userCount,omitempty"`

			// Total reported segment views
			ViewCount *int `json:"viewCount,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUsernameResponse parses an HTTP response from a GetUsernameWithResponse call
func ParseGetUsernameResponse(rsp *http.Response) (*GetUsernameResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsernameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// public userID if not username set
			UserName *interface{} `json:"userName,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetViewsForUserResponse parses an HTTP response from a GetViewsForUserWithResponse call
func ParseGetViewsForUserResponse(rsp *http.Response) (*GetViewsForUserResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetViewsForUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			ViewCount *int `json:"viewCount,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetIsUserVIPResponse parses an HTTP response from a GetIsUserVIPWithResponse call
func ParseGetIsUserVIPResponse(rsp *http.Response) (*GetIsUserVIPResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIsUserVIPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Public userID (private userID hashed 5000 times)
			HashedUserID *PublicUserID `json:"hashedUserID,omitempty"`

			// if user is VIP
			Vip *bool `json:"vip,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteLockCategoriesResponse parses an HTTP response from a DeleteLockCategoriesWithResponse call
func ParseDeleteLockCategoriesResponse(rsp *http.Response) (*DeleteLockCategoriesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteLockCategoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetLockCategoriesResponse parses an HTTP response from a GetLockCategoriesWithResponse call
func ParseGetLockCategoriesResponse(rsp *http.Response) (*GetLockCategoriesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLockCategoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VideoLock
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostLockCategoriesResponse parses an HTTP response from a PostLockCategoriesWithResponse call
func ParsePostLockCategoriesResponse(rsp *http.Response) (*PostLockCategoriesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostLockCategoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidParameter
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403VIP
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetLockCategoriesByHashResponse parses an HTTP response from a GetLockCategoriesByHashWithResponse call
func ParseGetLockCategoriesByHashResponse(rsp *http.Response) (*GetLockCategoriesByHashResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLockCategoriesByHashResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Categories []Category `json:"categories"`

			// Full hash of videoID
			Hash VideoIDHash `json:"hash"`

			// VIP specified lock reason
			Reason LockReason `json:"reason"`

			// ID of video
			VideoID VideoID `json:"videoID"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidParameter
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetLockReasonResponse parses an HTTP response from a GetLockReasonWithResponse call
func ParseGetLockReasonResponse(rsp *http.Response) (*GetLockReasonResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLockReasonResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []LockReason
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPurgeAllSegmentsResponse parses an HTTP response from a PostPurgeAllSegmentsWithResponse call
func ParsePostPurgeAllSegmentsResponse(rsp *http.Response) (*PostPurgeAllSegmentsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPurgeAllSegmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidParameter
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403VIP
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetSearchSegmentsResponse parses an HTTP response from a GetSearchSegmentsWithResponse call
func ParseGetSearchSegmentsResponse(rsp *http.Response) (*GetSearchSegmentsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSearchSegmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Page Number
			Page *int `json:"page,omitempty"`

			// Total segments matching query
			SegmentCount *int             `json:"segmentCount,omitempty"`
			Segments     *[]SearchSegment `json:"segments,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// Parameter does not match format requirements (Bad JSON or not an arrya)
			Reason *InvalidParameter `json:"reason,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetSegmentInfoResponse parses an HTTP response from a GetSegmentInfoWithResponse call
func ParseGetSegmentInfoResponse(rsp *http.Response) (*GetSegmentInfoResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSegmentInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []DbSegment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// reason for failiure
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseSetUsernameResponse parses an HTTP response from a SetUsernameWithResponse call
func ParseSetUsernameResponse(rsp *http.Response) (*SetUsernameResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetUsernameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostShadowBanUserResponse parses an HTTP response from a PostShadowBanUserWithResponse call
func ParsePostShadowBanUserResponse(rsp *http.Response) (*PostShadowBanUserResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostShadowBanUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetskipsegmentsResponse parses an HTTP response from a GetskipsegmentsWithResponse call
func ParseGetskipsegmentsResponse(rsp *http.Response) (*GetskipsegmentsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetskipsegmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SkipSegment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// Parameter does not match format requirements (Bad JSON or not an arrya)
			Message *InvalidParameter `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePostSkipSegmentsResponse parses an HTTP response from a PostSkipSegmentsWithResponse call
func ParsePostSkipSegmentsResponse(rsp *http.Response) (*PostSkipSegmentsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSkipSegmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			UUID *SegmentUUID `json:"UUID,omitempty"`

			// Segment Category
			Category *Category `json:"category,omitempty"`

			// Start and end time in seconds
			Segment *[]int `json:"segment,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			ErrorMessage *interface{} `json:"errorMessage,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest struct {
			// Segment already submitted before
			ErrorMessage *string `json:"errorMessage,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseGetSkipSegmentsByHashResponse parses an HTTP response from a GetSkipSegmentsByHashWithResponse call
func ParseGetSkipSegmentsByHashResponse(rsp *http.Response) (*GetSkipSegmentsByHashResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSkipSegmentsByHashResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []HashSkipSegment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidParameter
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetStatusResponse parses an HTTP response from a GetStatusWithResponse call
func ParseGetStatusResponse(rsp *http.Response) (*GetStatusResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatusResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetStatusParamResponse parses an HTTP response from a GetStatusParamWithResponse call
func ParseGetStatusParamResponse(rsp *http.Response) (*GetStatusParamResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatusParamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatusResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUserIDResponse parses an HTTP response from a GetUserIDWithResponse call
func ParseGetUserIDResponse(rsp *http.Response) (*GetUserIDResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			// Public userID (private userID hashed 5000 times)
			UserID   *PublicUserID `json:"userID,omitempty"`
			UserName *string       `json:"userName,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUserInfoResponse parses an HTTP response from a GetUserInfoWithResponse call
func ParseGetUserInfoResponse(rsp *http.Response) (*GetUserInfoResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Total number of ignored/ hidden segments
			IgnoredSegmentCount *int `json:"ignoredSegmentCount,omitempty"`

			// Total number of views on ignored/ hidden segments
			IgnoredViewCount *int         `json:"ignoredViewCount,omitempty"`
			LastSegmentID    *SegmentUUID `json:"lastSegmentID,omitempty"`

			// minutes saved
			MinutesSaved *float32 `json:"minutesSaved,omitempty"`

			// Reputation value
			Reputation *float32 `json:"reputation,omitempty"`

			// Total number of segments excluding ignored/ hidden segments
			SegmentCount *int `json:"segmentCount,omitempty"`

			// Public userID (private userID hashed 5000 times)
			UserID *PublicUserID `json:"userID,omitempty"`

			// public userID if not set
			UserName *interface{} `json:"userName,omitempty"`

			// Total number of views ecluding views on ignored/ hidden segments
			ViewCount *int `json:"viewCount,omitempty"`

			// VIP status
			Vip *bool `json:"vip,omitempty"`

			// currently enabled warnings
			Warnings *int `json:"warnings,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidParameter
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetUserStatsResponse parses an HTTP response from a GetUserStatsWithResponse call
func ParseGetUserStatsResponse(rsp *http.Response) (*GetUserStatsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserStatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserStats
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostViewedVideoSponsorTimeResponse parses an HTTP response from a PostViewedVideoSponsorTimeWithResponse call
func ParsePostViewedVideoSponsorTimeResponse(rsp *http.Response) (*PostViewedVideoSponsorTimeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostViewedVideoSponsorTimeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Message *interface{} `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error *string `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostVoteOnSponsorTimeResponse parses an HTTP response from a PostVoteOnSponsorTimeWithResponse call
func ParsePostVoteOnSponsorTimeResponse(rsp *http.Response) (*PostVoteOnSponsorTimeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostVoteOnSponsorTimeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostWarnUserResponse parses an HTTP response from a PostWarnUserWithResponse call
func ParsePostWarnUserResponse(rsp *http.Response) (*PostWarnUserResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostWarnUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InvalidParameter
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403VIP
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

